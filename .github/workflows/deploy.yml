name: Deploy

on: 
  workflow_dispatch:
    inputs:
      release_tag_name_input:
        description: "Release Tag Name <X.X.X>"
        required: true
  release:
    types:
      - published


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.create_tags.outputs.package_version }}
      tag_version: ${{ steps.create_tags.outputs.tag_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Create Deploy version vars
        id: create_tags
        run: |
          if [[ "${{ github.event_name }}" != "release" ]]; then
            echo "Logic branch: not release"
            case "${RELEASE_TAG_NAME_INPUT:0:1}" in
              v)
                echo "RELEASE_NAME=${RELEASE_TAG_NAME_INPUT:1}" >> $GITHUB_ENV
                echo "RELEASE_TAG_NAME=$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
                echo "::set-output name=package_version::${RELEASE_TAG_NAME_INPUT:1}"
                echo "::set-output name=tag_version::$RELEASE_TAG_NAME_INPUT"
                ;;
              [0-9])
                echo "RELEASE_NAME=$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
                echo "RELEASE_TAG_NAME=v$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
                echo "::set-output name=package_version::$RELEASE_TAG_NAME_INPUT"
                echo "::set-output name=tag_version::v$RELEASE_TAG_NAME_INPUT"
                ;;
              *)
                exit 1
                ;;
            esac
          else
            echo "Logic branch: is release"
            TAG_VERSION=$(echo ${{ github.ref }} | cut -d "/" -f 3)
            PKG_VERSION=${TAG_VERSION:1}

            echo "::set-output name=package_version::$PKG_VERSION"
            echo "::set-output name=tag_version::$TAG_VERSION"
          fi
        env:
          RELEASE_TAG_NAME_INPUT: ${{ github.event.inputs.release_tag_name_input }}

      - name: Testing
        run: |
          echo "GITHUB_REF: $GITHUB_REF" 
          echo "GITHUB_EVENT_RELEASE: ${{ github.event_name }}" 


  snap:
    if: false
    name: Deploy Snap
    runs-on: ubuntu-latest
    needs: setup
    env:
      PKG_VERSION: ${{ needs.setup.outputs.package_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Install Snap
        if: false
        uses: samuelmeuli/action-snapcraft@v1
        with:
          snapcraft_token: ${{ secrets.SNAP_TOKEN }}

      - name: setup
        run: mkdir dist

      - name: get snap package
        uses: Xotl/cool-github-releases@v1
        with:
          mode: download
          tag_name: ${{ env.TAG_VERSION }}
          assets: bitwarden_${{ env.PKG_VERSION }}_amd64.snap|./dist/bitwarden_${{ env.PKG_VERSION }}_amd64.snap
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: test
        run: ls -alht dist

      - name: Deploy to Snap Store
        if: false
        run: |
          snapcraft upload dist/bitwarden_${{ env.PACKAGE_VERSION }}_amd64.snap --release stable
          snapcraft logout


  choco:
    if: false
    name: Deploy Choco
    runs-on: windows-latest
    needs: setup
    env:
      PKG_VERSION: ${{ needs.setup.outputs.package_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Chocolatey
        if: false
        run: choco apikey --key $env:CHOCO_API_KEY --source https://push.chocolatey.org/
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}

      - name: make dist dir 
        shell: pwsh
        run: New-Item -ItemType directory -Path ./dist

      - name: Get nupkg
        uses: Xotl/cool-github-releases@v1
        with:
          mode: download
          tag_name: ${{ env.TAG_VERSION }}
          assets: bitwarden.${{ env.PKG_VERSION }}.nupkg|./dist/bitwarden.${{ env.PKG_VERSION }}.nupkg
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Chocolatey
        if: false
        shell: pwsh
        run: |
          cd dist
          choco push


  macos:
    if: false
    runs-on: macos-latest
    needs: setup
    env:
      PKG_VERSION: ${{ needs.setup.outputs.package_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: make target directory
        run: mkdir -p dist/mas

      - name: Get mac release asset
        uses: Xotl/cool-github-releases@v1
        with:
          mode: download
          tag_name: ${{ env.TAG_VERSION }}
          assets: Bitwarden-${{ env.PKG_VERSION }}.pkg|./dist/mas/Bitwarden-${{ env.PKG_VERSION }}.pkg
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to App Store
        if: false
        run: npm run upload:mas
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}


  auto-updater-deploy:
    name: Release auto-updater files
    runs-on: ubuntu-latest
    needs: 
      - setup
      - snap
      - choco
      - macos
    env:
      RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Rename publish asset
        run: |
          curl \
              -H "Authorization:token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept:application/vnd.github.v3+json" \
              https://api.github.com/repos/joseph-flinn/desktop/releases \
              | jq -r " .[] | select( .tag_name == \"$TAG_VERSION\")" > release.json

          echo "=====RELEASE====="
          echo Release:
          #cat release.json

          RELEASE_UPLOAD_URL=$(cat release.json | jq -r ' .upload_url ' | cut -d { -f 1)
          cat release.json | jq -rc ' .assets[] | select( .name | test("prerelease-latest.*[yml|json]")) | {name: .name,  url: .url, content_type: .content_type}' > release_assets.jsonl

          echo "=====ASSETS====="
          echo Release Upload URL: $RELEASE_UPLOAD_URL
          echo Release Assets:
          cat release_assets.jsonl

          while read -r asset; do 
              FILE_NAME=$(echo $asset | jq -r '.name')
              FILE_URL=$(echo $asset | jq -r '.url')
              FILE_ID=$(echo $asset | jq -r '.id')
              echo "Asset name: $FILE_NAME"
              echo "Asset url: $FILE_URL"

              echo "Grabbing asset..."
              curl \
                  -L -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  $FILE_URL --output  $FILE_NAME

              NEW_FILE_SIZE=$(wc -c < $FILE_NAME | xargs)
              NEW_FILE_NAME=$(echo $FILE_NAME | awk '{split($0,a,"prerelease-"); print a[2]}')
              echo "New file size: $NEW_FILE_SIZE"
              echo "New file name: $NEW_FILE_NAME"
              echo "================"

              echo "Deleting remote asset..."
              curl \
                  -X DELETE \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "accept: application/vnd.github.v3+json" \
                  $FILE_URL

              echo "Pushing updated asset..."
              curl \
                  -X POST \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "content-type: text/yaml" \
                  -H "content-length: $NEW_FILE_SIZE" \
                  --data-binary @$FILE_NAME \
                  "$RELEASE_UPLOAD_URL?name=$NEW_FILE_NAME" --http1.1
          done < release_assets.jsonl
