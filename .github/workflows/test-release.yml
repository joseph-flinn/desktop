name: Test Release

on:
  workflow_dispatch:
    inputs:
      release_tag_name_input:
        description: 'Release Tag Name <X.X.X>'
        required: true


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      package_version: ${{ steps.create_tags.outputs.package_version }}
      tag_version: ${{ steps.create_tags.outputs.tag_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create Release Vars
        id: create_tags
        run: |
          case "${RELEASE_TAG_NAME_INPUT:0:1}" in
            v)
              echo "RELEASE_NAME=${RELEASE_TAG_NAME_INPUT:1}" >> $GITHUB_ENV
              echo "RELEASE_TAG_NAME=$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
              echo "::set-output name=package_version::${RELEASE_TAG_NAME_INPUT:1}"
              echo "::set-output name=tag_version::$RELEASE_TAG_NAME_INPUT"
              ;;
            [0-9])
              echo "RELEASE_NAME=$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
              echo "RELEASE_TAG_NAME=v$RELEASE_TAG_NAME_INPUT" >> $GITHUB_ENV
              echo "::set-output name=package_version::$RELEASE_TAG_NAME_INPUT"
              echo "::set-output name=tag_version::v$RELEASE_TAG_NAME_INPUT"
              ;;
            *)
              exit 1
              ;;
          esac
        env:
          RELEASE_TAG_NAME_INPUT: ${{ github.event.inputs.release_tag_name_input }}

      - name: Test ENVs
        run: |
          echo "PKG_VERSION: $RELEASE_NAME"
          echo "TAG_VERSION: $RELEASE_TAG_NAME"
          echo "PKG_VERSION output: ${{ steps.create_tags.outputs.package_version }}"
          echo "TAG_VERSION output: ${{ steps.create_tags.outputs.tag_version }}"


  linux:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PKG_VERSION: ${{ needs.setup.outputs.package_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
    steps:
      - name: Create test assets
        run: |
          echo "test" > bitwarden_${{ env.PKG_VERSION }}_amd64.snap
          echo "test" > bitwarden.${{ env.PKG_VERSION }}.nupkg
          echo "test" > Bitwarden-${{ env.PKG_VERSION }}.pkg
          echo "test" > latest.yml
          echo "test" > latest-linux.yml
          echo "test" > latest-mac.yml
          echo "test" > latest-mac.json

      - name: Upload test files
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bitwarden_${{ env.PKG_VERSION }}_amd64.snap
            bitwarden.${{ env.PKG_VERSION }}.nupkg
            Bitwarden-${{ env.PKG_VERSION }}.pkg
            latest.yml
            latest-linux.yml
            latest-mac.yml
            latest-mac.json
          draft: true
          prerelease: false
          tag_name: ${{ env.TAG_VERSION }}
          name: Version ${{ env.PKG_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  update-release:
    runs-on: ubuntu-latest
    needs: 
     - setup
     - linux
    env:
      PKG_VERSION: ${{ needs.setup.outputs.package_version }}
      TAG_VERSION: ${{ needs.setup.outputs.tag_version }}
#    permissions:
#      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Rename publish asset
        run: |
          curl \
              -H "Authorization:token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept:application/vnd.github.v3+json" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
              | jq -r " .[] | select( .tag_name == \"$TAG_VERSION\")" > release.json

          echo "=====RELEASE====="
          echo Release:
          #cat release.json

          RELEASE_UPLOAD_URL=$(cat release.json | jq -r ' .upload_url ' | cut -d { -f 1)
          cat release.json | jq -rc ' .assets[] | select( .name | test("latest.*[yml|json]")) | {name: .name,  url: .url, content_type: .content_type}' > release_assets.jsonl

          echo "=====ASSETS====="
          echo Release Upload URL: $RELEASE_UPLOAD_URL
          echo Release Assets:
          cat release_assets.jsonl

          while read -r asset; do 
              FILE_NAME=$(echo $asset | jq -r '.name')
              FILE_URL=$(echo $asset | jq -r '.url')
              FILE_ID=$(echo $asset | jq -r '.id')
              echo "Asset name: $FILE_NAME"
              echo "Asset url: $FILE_URL"

              echo "Grabbing asset..."
              curl \
                  -L -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/octet-stream" \
                  $FILE_URL --output  $FILE_NAME

              NEW_FILE_SIZE=$(wc -c < $FILE_NAME | xargs)
              echo "New file size: $NEW_FILE_SIZE"
              echo "New file name: $FILE_NAME"
              echo "================"

              echo "Deleting remote asset..."
              curl \
                  -X DELETE \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "accept: application/vnd.github.v3+json" \
                  $FILE_URL

              echo "Pushing updated asset..."
              curl \
                  -X POST \
                  -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "content-type: text/yaml" \
                  -H "content-length: $NEW_FILE_SIZE" \
                  --data-binary @$FILE_NAME \
                  "$RELEASE_UPLOAD_URL?name=prerelease-$FILE_NAME" --http1.1
          done < release_assets.jsonl
